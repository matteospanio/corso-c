::: {.content-visible unless-format="revealjs"}
> "I call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.", **Tony Hoare**

Seppure non sia una caratteristica introdotta con C, la null reference è un problema che affligge molti linguaggi di programmazione. Tony Hoare, scrivendo il linguaggio ALGOL W, introdusse questo concetto, C, ispirandosi fortemente ad ALGOL, ereditò questa caratteristica. L'utilizzo sbagliato di un puntatore nullo è una delle cause principali di errori in C.
:::

| Pregi | Difetti |
|----|----|
| Efficienza | Facile fare errori |
| Compattezza | Può diventare difficile da leggere |
| Portabilità | Non ci sono controlli a run time |
| Permissività | Permissività |

: Pregi e difetti del linguaggio C {#tbl-pro}

::: {.content-visible when-format="revealjs"}
## Pro e Contro {auto-animate=true .smaller}

- La permissività è sia un pro che un contro: sta al programmatore giocarla a suo vantaggio
- Evitare di farsi male da soli!
- Seguire le convenzioni di scrittura
- Attivare i warning sul compilatore (+ altri tool)
- Commentare!

![](figures/gun_meme.png){fig-align="center"}

:::

::: {.content-visible unless-format="revealjs"}

Di seguito sono commentate le caratteristiche riportate nella tabella @tbl-pro:

- **Efficienza**: il linguaggio C è nato per essere efficiente, doveva andare a sostituire il codice Assembly, è stato scritto quindi per essere veloce;
- **Compattezza**: il C è un linguaggio molto compatto, non ci sono molte parole chiave, non ci sono molte funzioni predefinite, non ci sono molte strutture dati predefinite;
- **Portabilità**: sebbene il C non sia stato pensato per essere portabile, la creazione di uno standard e la sua associazione con UNIX ha reso il C un linguaggio solido e usato su molte piattaforme. Uno degli slogan che accompagna il C da molti anni è "write once, compile everywhere" (scrivi una volta, compila ovunque), che poi venne ripreso con l'arrivo di Java e del suo "write once, run everywhere";
- **Permissività**: il C si basa su un'assunzione molto forte: *il programmatore sa cosa sta facendo*. Questo è sia un pro che un contro: da un lato permette al programmatore di fare tutto quello che vuole, dall'altro lato permette al programmatore di fare tutto quello che vuole. Questo significa che il programmatore può fare cose molto potenti, ma può anche fare cose molto pericolose.
- **Error prone**: proprio per la permissività appena menzionata, c'è spazio per fare molti errori. Questo è un problema che si può risolvere con l'uso di strumenti di analisi statica e dinamica, con l'uso di buone pratiche di programmazione e con l'uso di commenti e documentazione.
- **Difficile da leggere**: proprio per la compattezza, il C può diventare difficile da leggere. Esistono addirittura delle competizioni di programmazione in cui il C viene usato per scrivere codice illeggibile.
- **Run time**: una volta compilato, il programma C perde molte informazioni, per esempio non è più possibile conoscere i tipi delle variabili, pertanto non è possibile fare controlli a run time.
:::
