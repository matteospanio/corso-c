::: {.content-visible when-format="revealjs"}
- Si tratta di un **Linguaggio Compilato**
- Fortemente tipato
- Minimale
- **Permissivo** (il compilatore non si lamenta!)
-  Tecnicamente un linguaggio di alto livello, nella pratica ha molte feature che lo rendono uno dei linguaggi di più basso livello. Specialmente sulla gestione di memoria.
:::

::: {.content-visible unless-format="revealjs"}

In questa sezione si discutono brevemente le caratteristiche del linguaggio C evidenziandone pregi e difetti. L'aver concluso il precedente paragrafo parlando di compilatori lascia intuire che C sia un linguaggio **compilato**. Questo significa che il codice sorgente scritto in C deve essere tradotto in linguaggio macchina prima di poter essere eseguito. Altri punti caratteristici di C sono l'essere **minimale** (C rinuncia a molte astrazioni, questo, per esempio, permette di ridurre il numero di parole chiave del linguaggio), il fatto di essere **fortemente tipato** (le variabili devono essere dichiarate con un tipo e non possono cambiare tipo durante l'esecuzione del programma) e il fatto di essere **permissivo** (il compilatore non si lamenta di errori che in altri linguaggi sarebbero considerati gravi). Tecnicamente C è un linguaggio di alto livello, ma nella pratica ha molte feature che lo rendono uno dei linguaggi di più basso livello. Specialmente sulla gestione di memoria.

::: {.callout-note}
## Compilare o interpretare?

Non tutti i linguaggi di programmazione vanno compilati. Alcuni vengono interpretati. La differenza, semplificando, è che un linguaggio compilato viene tradotto in linguaggio macchina una volta per tutte, mentre un linguaggio interpretato viene tradotto in linguaggio macchina ogni volta che viene eseguito. Esistono moltissimi linguaggi di entrambi i tipi, e non esiste una regola che renda un sistema migliore dell'altro. Generalmente i linguaggi compilati sono più veloci, ma i linguaggi interpretati sono più flessibili. Spesso per progetti di piccole dimensioni o script i programmatori preferiscono usare linguaggi interpretati, mentre per progetti di grandi dimensioni o software che deve essere veloce si preferisce usare linguaggi compilati (non è sempre così però).

L'alternarsi tra i due tipi di linguaggi è una questione che esiste da tempo. È importante notare a riguardo che il predecessore di C, il linguaggio B, era un linguaggio interpretato. La scelta di C di essere compilato è stata una delle ragioni del suo successo. Allo stesso modo molti linguaggi interpretati si sono diffusi proprio per essere tali.
:::

:::


::: {.content-visible when-format="revealjs"}
## Pregi e difetti {auto-animate=true}
:::


::: {.content-visible unless-format="revealjs"}
### Pregi e difetti

Alcuni linguaggi sono permissivi. Al programmatore basta avere solo un senso di base di come le cose funzionano. Gli errori nel codice vengono segnalati dal sistema di compilazione o di esecuzione e il programmatore può arrangiarsi e alla fine sistemare le cose in modo che funzionino correttamente. Il linguaggio C non è così.

Il modello di programmazione in C è che il programmatore sa esattamente cosa vuole fare e come utilizzare le possibilità del linguaggio per raggiungere quel obiettivo. Il linguaggio permette al programmatore esperto di esprimere ciò che desidera nel minor tempo possibile, rimanendo fuori dal suo cammino. C è "semplice" nel senso che il numero di componenti nel linguaggio è piccolo: se due funzionalità del linguaggio realizzano più o meno la stessa cosa, C ne includerà solo una. La sintassi di C è concisa e il linguaggio non limita ciò che è "consentito": il programmatore può praticamente fare ciò che desidera.

Il sistema di tipi di C e i controlli degli errori esistono solo durante la compilazione. Il codice compilato viene eseguito in un modello di esecuzione ridotto senza controlli di sicurezza per conversioni di tipo errate, indici di array errati o puntatori errati. Non c'è un *garbage collector* per gestire la memoria. Invece, il programmatore gestisce manualmente la memoria heap. Tutto ciò rende C veloce ma fragile.

::: {.callout-note}
## The billion-dollar mistake
> "I call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.", **Tony Hoare**

Seppure non sia una caratteristica introdotta con C, la null reference è un problema che affligge molti linguaggi di programmazione. Tony Hoare, scrivendo il linguaggio ALGOL W, introdusse questo concetto, C, ispirandosi fortemente ad ALGOL, ereditò questa caratteristica. L'utilizzo sbagliato di un puntatore nullo è una delle cause principali di errori in C.
:::
:::

::: {.content-visible when-format="revealjs"}
| Pregi | Difetti |
|:----|----:|
| Efficienza | Facile fare errori |
| Compattezza | Può diventare difficile da leggere |
| Portabilità | Non ci sono controlli a run time |
| Permissività | Permissività |

## Pregi e Difetti {auto-animate=true .smaller}

- La permissività è sia un pro che un contro: sta al programmatore giocarla a suo vantaggio
- Evitare di farsi male da soli!
- Seguire le convenzioni di scrittura
- Attivare i warning sul compilatore (+ altri tool)
- Commentare!

![](figures/gun_meme.png){fig-align="center"}

:::

::: {.content-visible unless-format="revealjs"}

Di seguito sono commentate le caratteristiche principali considerate come i maggiori pregi e difetti del C:

1. **Efficienza**: il linguaggio C è nato per essere efficiente, doveva andare a sostituire il codice Assembly, è stato scritto quindi per essere veloce;
2. **Compattezza**: il C è un linguaggio molto compatto, non ci sono molte parole chiave, non ci sono molte funzioni predefinite, non ci sono molte strutture dati predefinite, fornisce soltanto "lo stretto indispensabile";
3. **Portabilità**: sebbene il C non sia stato pensato per essere portabile, la creazione di uno standard e la sua associazione con UNIX ha reso il C un linguaggio solido e usato su molte piattaforme. Uno degli slogan che accompagna il C da molti anni è "write once, compile everywhere" (scrivi una volta, compila ovunque), che poi venne ripreso con l'arrivo di Java e del suo "write once, run everywhere";
4. **Permissività**: il C si basa su un'assunzione molto forte: *il programmatore sa cosa sta facendo*. Questo è sia un pro che un contro: da un lato permette al programmatore di fare tutto quello che vuole, dall'altro lato permette al programmatore di fare tutto quello che vuole. Questo significa che il programmatore può fare cose molto potenti, ma può anche fare cose molto pericolose.
5. **Error prone**: proprio per la permissività appena menzionata, c'è spazio per fare molti errori. Questo è un problema che si può risolvere con l'uso di strumenti di analisi statica e dinamica, con l'uso di buone pratiche di programmazione e con l'uso di commenti e documentazione.
6. **Difficile da leggere**: proprio per la compattezza, il C può diventare difficile da leggere. Esistono addirittura delle competizioni di programmazione in cui il C viene usato per scrivere codice illeggibile.
7. **Run time**: una volta compilato, il programma C perde molte informazioni, per esempio non è più possibile conoscere i tipi delle variabili, pertanto non è possibile fare controlli a run time.
8. **Non Object-oriented**: lo stretto indispensabile fornito da C non include gli oggetti. Questo significa che non esistono le astrazioni tipiche di Java, classi, variabili di istanza, metodi... Esistono evoluzioni del C con queste caratteristiche (C++, C# e lo stesso Java ha ereditato molto dal C).
:::

::: {.content-visible when-format="revealjs"}
## Linguaggio Strutturato

- È possibile (e necessario) definire funzioni, che accettano $N$ parametri in input e restituiscono *un* valore come output.

- C non è un linguaggio a oggetti. Non esistono quindi le astrazioni tipiche di Java, classi, variabili di istanza, metodi...

- Esistono evoluzioni del C con queste caratteristiche (C++, C# e lo stesso Java ha ereditato molto dal C).
:::
