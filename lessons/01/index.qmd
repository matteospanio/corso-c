---
title: Basi di C
date: 03/12/2024
abstract-title: Argomenti trattati
abstract: In questa lezione si introduce il linguaggio di programmazione C illustrando la sua storia e quali elementi del suo design lo rendano un linguaggio usato ancora dopo 50 anni dalla sua creazione. A seguire una descrizione della sintassi di C, introducendo anche elementi di I/O con esempi ed esercizi.
---

{{< include _storia.qmd >}}

## Caratteristiche {transition=none}
{{< include _caratteristiche.qmd >}}

## Installazione
{{< include _installazione.qmd >}}

## La compilazione {transition=none}
{{< include _compilazione.qmd >}}

## Sintassi di C {auto-animate="true"}
{{< include _sintassi.qmd >}}

## Input/Output

- Abbiamo già usato nei nostri esempi l'inclusione di `stdio.h`
- Ci ha permesso di usare la funzione `printf`, con la quale possiamo stampare dei risultati a terminale
- L'altra importante funzione che ci permette di usare è `scanf`, che legge i dati forniti dall'utente a terminale
- Entrambe usano testo formattato, tramite uso di simboli speciali

:::{.content-visible when-format="revealjs"}
## Output con printf {.smaller}
:::
::: {.content-visible unless-format="revealjs"}
### Output con printf {.smaller}
:::

Gli specificatori iniziano con `%`, e per ciascuno deve esserci un parametro dopo la stringa di formattazione

`printf("Misura %d metri e %d cm \n", met, cm);`

Output: `Misura 2 e 15 cm`

I caratteri speciali sii scrivono con `\` (backslash) il carattere di *escaping*

`printf("Si va a capo con \\n\n");`

Output: `Si va a capo con \n`

:::{.content-visible when-format="revealjs"}
## Output con printf {.smaller}
:::

- `%d` per interi, es. $10$
- `%f` per float, es. $3.14$
- `%e` per float in notazione scientifica, es. $5.2\times 10^4$
- `%lf` per double, es. $3.14$
- `%s` per stringhe, es. `"ciao"`
- `%c` per caratteri, es. `'a'`
- `%p` per puntatori, es. `0x7fffbf7f3b4c`
- `%x` per interi in esadecimale, es. `ff`
- `%o` per interi in ottale, es. `77`
- `%Nf` per avere $N$ "spazi" per la stampa, es. `%5d` per  `112` con due spazi vuoti prima
- `%.Nf` per float con $N$ cifre decimali, es. `%.2f` per $3.14$

:::{.content-visible when-format="revealjs"}
## String format
:::
::: {.content-visible unless-format="revealjs"}
### String format
:::

Si è già visto `\n` per andare a capo, ma ce ne sono altri:

- `\n` per andare a capo
- `\t` per tabulare
- `\b` per backspace
- `\\` per stampare il backslash
- `\"` per stampare le virgolette
- `\0` per terminare una stringa

:::{.content-visible when-format="revealjs"}
## Input con scanf
:::
::: {.content-visible unless-format="revealjs"}
### Input con scanf
:::

`scanf` esegue pattern matching sull'input per popolare delle variabili

```{.c}
int base, altezza;
scanf("%d%d", &base, &altezza);
```

Per esempio se l'utente scrive `3 4` e preme invio, `base` sarà 3 e `altezza` sarà 4.

:::{.content-visible when-format="revealjs"}
## Input con scanf
:::

`scanf` scorre l'input ignorando ogni carattere bianco (spazi, tabulazioni, a capo). Se trova caratteri *compatibili* (+/-, 0-9, .) li legge e li converte nel tipo di variabile corrispondente.

Popola le variabili fino a trovare un carattere bianco o un carattere non compatibile.

::: {.content-visible when-format="revealjs"}
## {.smaller}
:::{.columns}

:::{.column width="50%"}

{{< include ./tables/_format_specifiers.qmd >}}

:::

:::{.column width="50%"}
```{.c}
{{< include ./code/format_strings.c >}}
```
:::
:::
:::

:::{.content-hidden when-format="revealjs"}

{{< include ./tables/_format_specifiers.qmd >}}
```{.c}
{{< include ./code/format_strings.c >}}
```
:::

## Esercizi


1. Scrivere un programma che legga due numeri e stampi la somma.

:::{.incremental}
2. Scrivere un programma che legga due frazioni in formato `"n/m"` e stampi la loro somma (non semplificata).
:::

. . .

:::{.callout-tip}
In questo caso possiamo richiedere all'utente che il formato includa lo slash, e quindi includerlo nel pattern di scanf.
:::
