# Strutture

## Strutture in C

Il C non permette di definire Classi e oggetti, si possono comunque definire dei tipi aggiuntivi:

- Strutture: insieme di dati
- Unioni: alternative tra tipi diversi
- Enumerazioni: insieme di costanti

## `struct`

Una struttura è un insieme di dati, si differenzia dagli array perché:

- gli elementi possono essere di tipo diverso
- gli elementi sono identificati da un nome

```c
struct studente {
    char nome[20];
    char cognome[20];
    int matricola;
};
```

## Inizializzazione

Si possono inizializzare le strutture quando vengono dichiarate:

```c
struct studente s = {"Mario", "Rossi", 12345};
```

Si possono inizializzare meno elementi rispetto a quelli dichiarati, in questo caso gli elementi non inizializzati vengono impostati a 0.

Un modo alternativo di inizializzare:

```c
struct studente s = {
    .nome = "Mario",
    .cognome = "Rossi",
    .matricole = 12345,
};
```

## Accedere agli elementi

Per accedere au singoli elementi di una struttura (detti anche membri) si usa l'operatore `.` (punto) dopo il nome della variabile:

```c
struct studente s = {"Mario", "Rossi", 12345};

printf("Nome: %s\n", s.nome);
printf("Cognome: %s\n", s.cognome);
s.matricola = 54321;
```

## Copie di strutture

Si può copiare interamente una struttura usando una variabile dello stesso tipo:

```c
struct studente a, b = {"Matteo", "Spanio", 56789};
a = b;
```

::: {.callout-important}
Solo l'operatore `=` è valido tra 2 struct, gli operatori `==` e `!=` NON si possono usare per vedere se due strutture sono uguali.
:::

## Dare i nomi alle strutture

Le stutture possono avere un nome, gli si può associare un tipo, oppure possono essere anonime.

Le strutture col nome, detto *structure tag*, si dichiarano come abbiamo già visto:

```c
struct nome {
    type member_name;
};
```

::: {.callout-warning}
Il tipo di una variabile `struct` è `struct nome_struct`, omettere la parola struct è un errore.
:::

## Strutture anonime

Nel caso in cui un si voglia usare una struct solo in un punto specifico del codice non è necessario associarvi un nome, si può dichiarare e associare direttamente:

```c
struct { int x; int y; } punto;
punto.x = 12;
punto.y = 18;
```

## typedef

`typedef` è un operatore che permette di definire alias per i tipi:

```c
typedef int Bool;
typedef float Euro;
typedef char[] String;
```

Queste dichiarazioni permettono scrivere codice più chiaro.

## Strutture con typedef

Dal momento che le strutture sono usate moltissimo e i programmatori sono pigri, solitamente, si preferisce omettere la parola chiave `struct` per riferirsi al tipo delle strutture grazie a typedef:

```c
typedef struct {
    int x;
    int y;
} Point;
Point punto = {
    .x = 1,
    .y = 2,
};
```

## Esempio

Si vuole creare un sistema informatico per la gestione degli esami di un gruppo di studenti, si vuole:

1. implementare una struttura dati per memorizzare l'esito relativo a un esame;
2. memorizzare la lista degli esami con il voto di uno studente per ogni esame;
2. implementare un sistema multiutente in cui ogni utente possa consultare i propri voti.

## Memorizzare esame e voto

L'esito di un esame può essere rappresentato come una coppia di valori `<materia, voto>`, la struct serve proprio a questo:

```c
#define BUFFER_SIZE 128
typedef struct esame
{
    char materia[BUFFER_SIZE];
    unsigned int voto; // non esistono voti negativi
    // dal momento che il voto va da 1 a 30 avremmo 
    // potuto usare una variabile di tipo char
} Esame;
```

## Memorizzare la lista degli esami

```c
#define NUM_ESAMI 10
Esame esami[NUM_ESAMI];
```
