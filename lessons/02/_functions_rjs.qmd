# Funzioni

## Funzioni

Una funzione è una associazione tra due insiemi: il dominio e il codominio: $f: A \rightarrow B$

In programmazione il concetto di funzione è simile: una funzione è un blocco di codice che accetta un certo numero di argomenti e, spesso, restituisce un valore. Oltre al valore, però, una funzione può anche avere *side effects*, cioè modificare lo stato del programma.

## Funzioni in C

In C si può pensare a una qualsiasi funzione come una scatola nera con un certo numero di ingressi e **un solo** output.

![](./figures/black-box.png)

Praticamente una funzione è un sottoprogramma, un insieme di istruzioni che esegue un compito specifico.

## Funzioni: sintassi

```{.c}
return_type function_name( parameters )
{
    declarations
    statements
}
```

Esempio:

```{.c}
double average(int a, int b)
{
    double average;
    average = (a + b) / 2.0;
    return average;
}
```

## Funzioni senza valore di ritorno

Il tipo di ritorno può essere `void`, in tal caso la funzione non restituisce alcun valore:

```{.c}
void print_int(int a)
{
    printf("%d\n", a);
    return;
}
```

::: {.callout-note}
L'istruzione `return` può essere omessa in una funzione `void`.
:::

## Funzioni

Anche i parametri possono essere `void` oppure si possono omettere:

```{.c}
void print_hello(void)
{
    printf("Hello, world!\n");
    return;
}
```

## Chiamata di funzione

Le funzioni dichiarate precedentemente nel programma possono essere eseguite in blocchi di codice successivi.

Ogni chiamata di funzione è una *espressione*, e viene valutata con il suo valore di ritorno.

## Dichiarazione e definizione

Le funzioni possono essere dichiarate e definite in due momenti diversi del programma.

La dichiarazione di una funzione è una *promessa* che il programmatore fa al compilatore: "presto ti dirò cosa fa questa funzione".

La chiamata di funzione può avvenire prima della definizione, ma solo dopo la dichiarazione.

La sintassi della dichiarazione è la stessa della definizione, ma senza il corpo della funzione:

```{.c}
return_type function_name( parameters );
```

## Dichiarazione e definizione

Esempio:

```{.c}
#include <stdio.h>

int sum(int a, int b); // dichiarazione

int main(void)
{
    int x = 3, y = 4;
    int z = sum(x, y);
    printf("La somma di %d e %d è %d\n", x, y, z);
    return 0;
}

int sum(int a, int b) // definizione
{
    return a + b;
}
```

## Argomenti di funzione

Le funzioni possono accettare un numero arbitrario di argomenti, ma è meglio limitare il numero di argomenti per mantenere la leggibilità del codice.

Gli argomenti possono anche essere degli array, mentre il tipo di ritorno no.

Se si passa un array come argomento, si può omettere la sua dimensione, ma in tal caso non sarà possibile conoscere la dimensione dell'array all'interno della funzione, per questo spesso si passa anche la dimensione dell'array come argomento.

## Argomenti di funzione

Il passaggio degli argomenti può avvenire in due modi:

- per valore (*by value*): il valore dell'argomento viene copiato nella funzione
- per riferimento (*by reference*): viene passato l'indirizzo di memoria dell'argomento

```{.c}
int increment(int a) { // passaggio per valore
    a++;
    return a; // a è una copia dell'argomento
}

// il vettore a è passato per riferimento
void square(int a[], int dim) {
    for (int i = 0; i < dim; i++) {
        a[i] *= a[i];
    }
    return;
}
```

## Ricorsione

Una funzione che invoca se stessa è detta *ricorsiva*.

```{.c}
int factorial(int n) {
    if (n == 0)
        return 1;
    return n * factorial(n - 1);
}
```

## Esercizi {.smaller}

1. Scrivere una funzione che trovi il valore minimo in un array di numeri interi la firma della funzione è `int array_min(int arr[], int size)`.

2. Scrivere una funzione ricorsiva per sommare gli elementi di un array di double, la firma della funzione è `double array_sum(double arr[], int size)`.

3. Scrivere una funzione ricorsiva che, dato un array di caratteri, ne stampi il contenuto su standard output. La firma della funzione è `void print_string(char arr[], int size)`.

4. Modificare la soluzione dell'esercizio precedente per stampare l'array in ordine inverso. Implementare poi una soluzione non ricorsiva allo stesso problema.

5. Scrivere una funzione ricorsiva `all` che, dato un array di interi, restituisca true se **tutti** gli elementi dell'array sono diversi da 0, false altrimenti.
