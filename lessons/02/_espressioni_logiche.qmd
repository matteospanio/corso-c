Alcuni operatori ci dicono se una certa espressione è "vera" o "falsa", ad esempio:

`i < j && j < k` ci dice se $i$ è minore sia di $j$ che di $k$

::: {.callout-note}
$i < j < k$ si può scrivere ma non fa quello che sembra, in realtà: `(i < j) < k` è vero con `int i=3, j=2, k=1`.
:::

##

Il tipo di ritorno di queste espressioni in C è un intero, il tipo booleano non esiste in C (in C99 si è provato a sistemare).

- $0 \rightarrow$ falso
- $1 \rightarrow$ vero (e tutti gli interi diversi da $0$)

## Espressioni logiche

Gli operatori booleani producono tutti 0 oppure 1 come risultato, ma bisogna ricordare che qualunque valore diverso da 0 è considerato vero.

L'espressione `(5 && 1)` viene valutata come vera in quanto entrambi i valori sono diversi da 0

## Espressioni logiche

- *!expr* restituisce 1 se *expr* è 0
- *expr1 && expr2* restituisce 1 se entrambe le espressioni sono non-zero
- *expr1 || expr2* restituisce 1 se almeno una delle due espressioni è non-zero

::: {.callout-note}
Sia `&&` che `||` sono operatori a corto circuito, cioè se il risultato è già noto dopo aver valutato la prima espressione, la seconda non viene valutata.
:::
