# Array

## Array

Generalmente una variabile può contenere un solo valore, spesso però si vuole eseguire operazioni su una sequenza di variabili, una soluzione è l'utilizzo di un **array** (o vettore). Un array è una collezione di elementi **omogenei** (tutti dello stesso tipo).

## Array

La dichiarazione di un array avviene specificando il tipo e il numero degli elementi:

```{.c}
int a[10]
```

La dimensione dell'array è una costante intera, spesso definita tramite una macro o una costante:

```{.c}
#define N 10
int a[N];
```
oppure:
```{.c}
const int N = 10;
int a[N];
```

## Array

Si accede a un elemento dell'array tramite **subscripting**:

```{.c}
int a[2];
a[0] = 1;
a[1] = 2;
```

Gli indici degli array in C partono da 0, come in Java.

## Array e indici

Il compilatore C non controlla i limiti degli array, quindi è possibile accedere a elementi fuori dal range definito, questo può causare errori difficili da individuare.

```{.c}
int a[10], i;
for (i = 0; i <= 10; i++) {
    a[i] = 0;
}
```

In certi compilatori il codice sopra riportato causa un loop infinito (più spesso però genera un errore a runtime e ferma l'esecuzione).

## Array e indici

Si intuisce che C sia **molto permissivo** con il subscripting, il seguente codice quindi è perfettamente legittimo:

```{.c}
int a[50];
int i = 0, j = 3;
a[i+j*10] = 0;

i = 0;
while (i < j)
    a[i++] = 0;
```

## Array: inizializzazione

Un array può essere inizializzato al momento della dichiarazione:

```{.c}
int a[5] = {1, 2, 3, 4, 5};
```

Se si mettono meno numeri, i restanti elementi vengono inizializzati a 0 (ma questo non succede se non ne specifico nessuno!):

```{.c}
int a[5] = {1, 2, 3}; // a = {1, 2, 3, 0, 0}
int b[4] = {0}; // b = {0, 0, 0, 0}
```

## Array: inizializzazione

Se metto più elementi di quelli dichiarati il compilatore segnala un errore. Se invece si omette la dimensione dell'array, il compilatore la calcola automaticamente dalla lista di initializzazione:

```{.c}
int a[] = {1, 2, 3}; // a ha dimensione 3
```

## Dimensione di un array

In C non esiste un sistema per ottenere senza sforzo la dimensione di un array, per questo, spesso, si utilizza una variabile per memorizzare la dimensione dell'array.

Tuttavia si può usare `sizeof` per ottenere la dimensione di un array:

```{.c}
int a[10];
sizeof(a); /* restituisce 40 su una macchina a 32 bit */
sizeof(a[0]); /* 4 */
sizeof(a)/sizeof(a[0]); /* 10, la dimensione dell'array */
```

## Array multidimensionali

Un array può contenere elementi di qualsiasi tipo, anche altri array! Per dichiarare un array multidimensionale si specifica il numero di elementi per ogni dimensione:

`int matrix[5][9];`

Per accedere a un elemento di un array multidimensionale si usano più indici:

`matrix[1][5] = 42;` e NON `matrix[1,5] = 42;`

## Array multidimensionali

`int matrix[5][9];`

![](figures/array_matrix.png)

## Array: esercizi (1)

Scrivere un programma che distribuisca una mano di carte per il gioco della briscola (3 carte) e le stampi a video.

## Array: esercizi (2)

Scrivere un programma che calcoli la lunghezza media delle parole di un messaggio scritto in input.
Per semplicità si consideri la punteggiatura come parte di una parola.

Esempio:

```plaintext
Scrivi una frase: Era solo un abbaglio.
Lunghezza media: 4.5
```

::: {.callout-tip}
La funzione `getchar` legge un carattere alla volta da standard input.
:::
