Esistono molteplici operatori, ognuno ha varie caratteristiche:

- **arietà**: numero di argomenti (unario, binario, ternario)
- **precedenza**: ordine in cui vengono analizzati gli operatori
- **associatività**: se ci sono più operatori uguali (o di uguale precedenza)
- **side-effects**, se presenti (cioè le variabili coinvolte vengono cambiate o no)

## Operatori

`i + j * k` equivale a `i + (j * k)`

`i + j - k` equivale a `(i + j) - k`

## Operatori

Gli operatori più in alto hanno priorità più alta:

![](./table_operators.png)

## Operatori

`++` e `--` servono ad aumentare/diminuire di 1 una variabile.

Sono piuttosto comuni ma bisogna fare attenzione:

- possono essere usati prima della variabile e.g. `++i`
- possono essere usati dopo della variabile e.g. `i--`

## Indovinello

Indovina l'outpu del seguente codice:

```{.c}
i = 1;
printf("i is %d\n", i++);
printf("i is %d\n", i);
printf("i is %d\n", ++i);
printf("i is %d\n", i);
```

## Operatori

`i++` è il post-incremento, `++i` è il pre-incremento

```{.c}
i = 1;
printf("i is %d\n", i++); /* i is 1 */
printf("i is %d\n", i);   /* i is 2 */
printf("i is %d\n", ++i); /* i is 3 */
printf("i is %d\n", i);   /* i is 3 */
```

:::{.callout-tip}
## Da grandi poteri derivano grandi bugs...

Gli operatori di post/pre-incremento sono molto utili e vengono usati spesso, vanno però usati con attenzione. Nella maggior parte delle situazioni è bene usare queste operazioni atomicamente (da sole in una riga).
:::

