# Strutture

## Strutture in C

Il C non permette di definire Classi e oggetti, si possono comunque definire dei tipi aggiuntivi:

- Strutture: insieme di dati
- Unioni: alternative tra tipi diversi
- Enumerazioni: insieme di costanti

## `struct`

Una struttura è un insieme di dati, si differenzia dagli array perché:

- gli elementi possono essere di tipo diverso
- gli elementi sono identificati da un nome

```c
struct studente {
    char nome[20];
    char cognome[20];
    int matricola;
};
```

## Inizializzazione

Si possono inizializzare le strutture quando vengono dichiarate:

```c
struct studente s = {"Mario", "Rossi", 12345};
```

Si possono inizializzare meno elementi rispetto a quelli dichiarati, in questo caso gli elementi non inizializzati vengono impostati a 0.

Un modo alternativo di inizializzare:

```c
struct studente s = {
    .nome = "Mario",
    .cognome = "Rossi",
    .matricole = 12345,
};
```

## Accedere agli elementi

Per accedere au singoli elementi di una struttura (detti anche membri) si usa l'operatore `.` (punto) dopo il nome della variabile:

```c
struct studente s = {"Mario", "Rossi", 12345};

printf("Nome: %s\n", s.nome);
printf("Cognome: %s\n", s.cognome);
s.matricola = 54321;
```

## Copie di strutture

Si può copiare interamente una struttura usando una variabile dello stesso tipo:

```c
struct studente a, b = {"Matteo", "Spanio", 56789};
a = b;
```

::: {.callout-important}
Solo l'operatore `=` è valido tra 2 struct, gli operatori `==` e `!=` NON si possono usare per vedere se due strutture sono uguali.
:::

## Dare i nomi alle strutture

Le stutture possono avere un nome, gli si può associare un tipo, oppure possono essere anonime.

Le strutture col nome, detto *structure tag*, si dichiarano come abbiamo già visto:

```c
struct nome {
    type member_name;
};
```

::: {.callout-warning}
Il tipo di una variabile `struct` è `struct nome_struct`, omettere la parola struct è un errore.
:::

## Strutture anonime

Nel caso in cui un si voglia usare una struct solo in un punto specifico del codice non è necessario associarvi un nome, si può dichiarare e associare direttamente:

```c
struct { int x; int y; } punto;
punto.x = 12;
punto.y = 18;
```

## typedef

`typedef` è un operatore che permette di definire alias per i tipi:

```c
typedef int Bool;
typedef float Euro;
typedef char* String;
```

Queste dichiarazioni permettono scrivere codice più chiaro.

## Strutture con typedef

Dal momento che le strutture sono usate moltissimo e i programmatori sono pigri, solitamente, si preferisce omettere la parola chiave `struct` per riferirsi al tipo delle strutture grazie a typedef:

```c
typedef struct {
    int x;
    int y;
} Point;
Point punto = {
    .x = 1,
    .y = 2,
};
```

## Cast a strutture

Una volta definito il tipo con typedef, si può popolare una struttura con la stessa sintassi dell'inizializzazione, occorre fare un cast esplicito però:

```{.c}
typedef struct {
    int x;
    int y;
} Point;

Point s;
s = (Point) { .x = 1, .y = 2 };
```

## `struct`

A prescindere da quale metodo di definizione si scelga, le strutture possono essere argomenti di funzioni e restituite da funzioni:

```c
#include <math.h>
typedef struct point {
    int x;
    int y;
} Point;

Point somma(Point a, struct point b) {
    return (Point) { .x = a.x + b.x, .y = a.y + b.y };
}

float distanza(Point a, Point b) {
    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}
```

## `struct` e puntatori

Si possono creare puntatori a strutture (come per qualsiasi altro tipo di dato):

```c
struct point *p;
Point *p1;

void foo(Point* p);
```

## `struct`

-  Si possono creare array di strutture:

```c
Point punti[10];
punti[0].x = 1;
```

- Inserire un array in una struttura
- Inserire una struttura in un'altra struttura
- Inserire unioni in una struttura
- Inserire strutture in unioni

## Esempio

Si vuole creare un sistema informatico per la gestione squadra della nazionale Italiana di calcio che giocò ai mondiali del 1982:

1. implementare una struttura dati per memorizzare i dati di un giocatore di calcio;
2. memorizzare l'elenco dei giocatori della squadra;
4. ordinare i giocatori in base numero di maglia.

## Memorizzare un giocatore

Ai fini della classifica è necessario memorizzare il nome della squadra e i punti ottenuti:

```c
#define BUFFER_SIZE 128
typedef struct giocatore
{
    char nome[BUFFER_SIZE];
    char cognome[BUFFER_SIZE];
    unsigned int numero_maglia; // non esistono numeri di maglia negativi
} Giocatore;
```

## Memorizzare la lista dei giocatori

La struct `Giocatore` è di fatto un tipo di dato, possiamo quindi creare un array di esami dove memorizzare la formazione:

```c
#define NUM 22
Giocatore squadra[NUM];
```

## Ordinare i giocatori

Per ordinare i giocatori in base al numero di maglia, bisogna introdurre un algoritmo di ordinamento:

Il più intuitivo, ma non il più efficiente, è il Bubble Sort:

![](https://upload.wikimedia.org/wikipedia/commons/c/c8/Bubble-sort-example-300px.gif)

## Unioni

- Le unioni sono simili alle strutture, nel senso che permettono di usare membri di tipo diverso
- La differenza è che una struttura tiene tutti i membri in memoria, mentre una union tiene solo un membro alla volta

```c
union {
    int i;
    double d;
} u;

struct {
    int i;
    double d;
} s;
```

## Unioni

Si può inizializzare solo un elemento di una union:

```c
union {
    int i;
    double d;
} u = { .i = 3 };

u.d = 5.7
```

Come per le strutture, posso dare nomi alle unioni tramite tag
oppure con typedef.

## Enumerazioni

In molti programmi si usano interi come "*codici*" per indicare varie cose. Un caso comune sono per esempio i codici di errore.

Spesso si usano macro o costanti, ma è più chiaro usare enumerazioni:

`enum {CUORI, QUADRI, FIORI, PICCHE} s1, s2;`

Ora le variabili `s1` e `s2` possono assumere solo uno dei quattro valori definiti.

# Strutture dati

## Strutture dati

Le strutture sono molto utili per definire... strutture dati.

Per esempio si possono definire array dinamici, liste concatenate, alberi, pile, code...

## Array con strutture

Gli array in C sono molto limitati, infatti dobbiamo gestire la loro lunghezza *a mano*...

Si può creare una struttura che contenga un array e la sua lunghezza:

```c
#define MAX 1024

typedef struct intarray {
    int array[MAX];
    int length;
} IntArray;
```

## Array con strutture

Adesso si può passare la struttura come argomento di una funzione:

```c
void stampa_array(IntArray a) {
    for (int i = 0; i < a.length; i++) {
        printf("%d ", a.array[i]);
    }
    printf("\n");
}
```
Si nota subito che non abbiamo più bisogno di passare la lunghezza dell'array come argomento.

## Array con strutture

L'implementazione che abbiamo visto ha due grossi problemi:

1. la dimensione dell'array è fissa
2. la struttura `IntArray` funziona solo con array di interi, per fare array di float, char, ecc. bisogna creare ogni volta una nuova struttura

## Memoria dinamica

- Le strutture dati in C hanno dimensione fissa. Infatti gli array vengono inizializzati con un valore costante.

- Esistono però dei comandi che permettono di allocare dinamicamente zone di memoria, permettendo di fare strutture che crescono o si rimpiccioliscono durante l'esecuzione del programma.

## Memoria dinamica

Le operazioni per gestire la memoria dinamica si trovano nella libreria `stdlib.h` e sono:

1. `malloc` (memory allocation): alloca una zona di memoria di una certa dimensione
2. `calloc` (clear allocation): alloca una zona di memoria di una certa dimensione e la inizializza a 0
3. `realloc` (reallocate): cambia la dimensione di una zona di memoria già allocata

## Puntatore a void

`malloc`, `calloc` e `realloc` restituiscono un puntatore a void, che è un puntatore generico.

Questo puntatore non fa riferimento a un certo tipo di dato, ma solo a un indirizzo di memoria.

## `malloc`

`void* malloc(size_t size);`

Supponendo di voler creare un array di interi di dimensione variabile, c'è bisogno di creare un puntatore ad interi e poi assegnargli l'indirizzo della nuova zona di memoria:

```{.c}
int *a;
a = malloc(10 * sizeof(int));
```

La funzione `malloc` accetta come argomento il numero di byte da allocare. L'esempio crea 10 cellette di memoria, ciascuna grande quanto un intero (4 byte).

## `calloc`

`void* calloc(size_t num, size_t size);`

- Per inizializzare array torna comoda anche la funzione calloc, che ha due parametri: numero di membri e dimensione (in byte) dei membri
- Inoltre ha come effetto aggiuntivo di porre a zero tutti i byte interessati (quindi tutti i membri dell'array che creo)

```{.c}
double *a;
a = calloc(10, sizeof(double));
```
L'effetto di questo codice è lo stesso del precedente (con la malloc), ma con tutti i membri dell'array inizializzati a 0.

## `realloc`

`void* realloc(void* ptr, size_t size);`

- Questa funzione cambia la dimensione di uno spazio allocato
dinamicamente.

- L'argomento `ptr` deve essere un puntatore ottenuto da una funzione ..alloc, altrimenti porta a comportamento non definito.

- I dati già presenti nella zona di memoria vengono mantenuti.

## NULL

- Quando si usa la memoria dinamica, è importante controllare che l'allocazione sia andata a buon fine.

- Se `malloc`, `calloc` o `realloc` non riescono a trovare spazio in memoria, restituiscono `NULL`.

- `NULL` è una costante che rappresenta un puntatore all'indirizzo `0x0`. `NULL` è definito in `stdlib.h`.

## `malloc`, `calloc`, `realloc`

- Queste funzioni scrivono in una zona di memoria nota come **heap**;
- Le variabili locali e i parametri delle funzioni sono invece memorizzati nello **stack**;
- Usando ricorsione e molta memoria dinamica si può esaurire la memoria disponibile
- Occorre quindi fare uso oculato della memoria e pulire quella che usata che non serve più

## `free`

`void free(void* ptr);`

- La funzione free permette di liberare un blocco di memoria (e quindi renderlo disponibile per un'altra allocazione)
- `ptr` dopo l'esecuzione di `free` continua a puntare alla stessa zona di memoria, ma il contenuto di quella zona non è più garantito, si chiama **dangling pointer**
- Occorre, subito dopo la free, assegnare a `ptr` il valore `NULL` (oppure una nuova memoria)
- accedere un blocco deallocato è un gravissimo errore

## Array dinamico

Un array dinamico è un array la cui dimensione può cambiare durante l'esecuzione del programma.

Per implementare un array dinamico si può usare una struttura che contiene un puntatore all'array e la sua lunghezza:

```c
typedef struct {
    int *array;
    int capacity;
    int length;
} DynArray;
```

## `DynArray`

Il nuovo tipo `DynArray` ha tre membri:

- `array` è un puntatore ad interi, che punta all'array dinamico
- `capacity` è la dimensione massima dell'array
- `length` è il numero di elementi attualmente presenti nell'array

Quando length raggiunge capacity, bisogna riallocare la memoria per l'array, aumentando la sua dimensione.

## `DynArray` generico

Rimane il problema che `DynArray` funziona solo con array di interi.

Abbiamo però visto che `void *` serve proprio quando si usano indirizzi di memoria senza un tipo preciso, questo ci permette di definire un array di `void *` per decidere a runtime il tipo dell'array:

```{.c}
typedef struct {
    void **array;
    int capacity;
    int length;
} GenericArray;
```
